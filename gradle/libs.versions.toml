[versions]
minSdk = "25"
targetSdk = "34"
compileSdk = "34"
composeCompiler = "1.5.2" # Used inside convention plugin ComposePlugin
compose-multiplatform = "1.5.3"
moduleGraphAssertion = "2.5.0"
agp = "8.2.0-rc01"
spotless = "6.22.0"
kotlin = "1.9.10"
ktlint = "0.48.2"
mixpanel = "1.5.2"
kotlininject = "0.6.3"
ksp = "1.9.10-1.0.13"
circuit = "0.15.0"
windowSizeClass = "0.3.1"
kotlinxCollectionsImmutable = "0.3.6"
desugaring = "2.0.3"
androidxactivity = "1.8.0"
sqldelight = "2.0.0"
kotlinxDateTime = "0.4.1"
ktor = "2.3.5"
kermit = "2.0.2"
xmlUtilSerialization = "0.86.2"
kotlinxSerialization = "1.6.0"
junit5 = "5.10.0"
coroutines = "1.7.3"
lyricist = "1.6.0"
composeLintChecks = "1.2.0"

[plugins]
android-application = { id = "com.android.application", version.ref = "agp" }
android-library = { id = "com.android.library", version.ref = "agp" }
android-lint = { id = "com.android.lint", version.ref = "agp" }
android-test = { id = "com.android.test", version.ref = "agp" }
kotlin-serialization = { id = "org.jetbrains.kotlin.plugin.serialization", version.ref = "kotlin" }
kotlin-jvm = { id = "org.jetbrains.kotlin.jvm", version.ref = "kotlin" }
kotlin-android = { id = "org.jetbrains.kotlin.android", version.ref = "kotlin" }
kotlin-parcelize = { id = "org.jetbrains.kotlin.plugin.parcelize", version.ref = "kotlin" }
composeMultiplatform = { id = "org.jetbrains.compose", version.ref = "compose-multiplatform" }
spotless = { id = "com.diffplug.spotless", version.ref = "spotless" }
moduleGradleAssertion = { id = "com.jraska.module.graph.assertion", version.ref = "moduleGraphAssertion" }
ksp = { id = "com.google.devtools.ksp", version.ref = "ksp"}
cacheFixPlugin = { id = "org.gradle.android.cache-fix", version = "3.0" }
sqldelight = { id = "app.cash.sqldelight", version.ref = "sqldelight" }

[libraries]
androidx-activity-activity = { module = "androidx.activity:activity", version.ref = "androidxactivity" }
androidx-activity-compose = { module = "androidx.activity:activity-compose", version.ref = "androidxactivity" }
mixpanel = { module = "com.mixpanel:mixpanel-java", version.ref = "mixpanel" }
# Kotlin Inject
kotlininject-compiler = { module = "me.tatarka.inject:kotlin-inject-compiler-ksp", version.ref = "kotlininject" }
kotlininject-runtime = { module = "me.tatarka.inject:kotlin-inject-runtime", version.ref = "kotlininject" }
# Slack Circuit
circuit-foundation = { module = "com.slack.circuit:circuit-foundation", version.ref = "circuit" }
circuit-runtime = { module = "com.slack.circuit:circuit-runtime", version.ref = "circuit" }
circuit-overlay = { module = "com.slack.circuit:circuit-overlay", version.ref = "circuit" }
circuitx-gesture-navigation = { module = "com.slack.circuit:circuitx-gesture-navigation", version.ref = "circuit" }
circuit-retained = { module = "com.slack.circuit:circuit-retained", version.ref = "circuit" }
compose-material3-windowsizeclass = {module = "dev.chrisbanes.material3:material3-window-size-class-multiplatform", version.ref = "windowSizeClass"}
kotlinx-collections-immutable = { module = "org.jetbrains.kotlinx:kotlinx-collections-immutable", version.ref = "kotlinxCollectionsImmutable" }
android-desugaring = { module = "com.android.tools:desugar_jdk_libs", version.ref = "desugaring" }
sqldelight-android = { module = "app.cash.sqldelight:android-driver", version.ref = "sqldelight" }
sqldelight-native = { module = "app.cash.sqldelight:native-driver", version.ref = "sqldelight" }
sqldelight-sqlite = { module = "app.cash.sqldelight:sqlite-driver", version.ref = "sqldelight" }
sqldelight-coroutines = { module = "app.cash.sqldelight:coroutines-extensions", version.ref = "sqldelight" }
sqldelight-primitive = { module = "app.cash.sqldelight:primitive-adapters", version.ref = "sqldelight" }
kotlinx-datetime = { module = "org.jetbrains.kotlinx:kotlinx-datetime", version.ref = "kotlinxDateTime" }
ktor-client-core = { module = "io.ktor:ktor-client-core", version.ref = "ktor" }
ktor-client-logging = { module = "io.ktor:ktor-client-logging", version.ref = "ktor" }
ktor-client-darwin = { module = "io.ktor:ktor-client-darwin", version.ref = "ktor" }
ktor-client-okhttp = { module = "io.ktor:ktor-client-okhttp", version.ref = "ktor" }
ktor-client-content-negotiation = { module = "io.ktor:ktor-client-content-negotiation", version.ref = "ktor" }
ktor-client-serialization = { module = "io.ktor:ktor-client-serialization", version.ref = "ktor"}
ktor-client-mock = { module = "io.ktor:ktor-client-mock", version.ref = "ktor" }
xml-util-serialization = { module = "io.github.pdvrieze.xmlutil:serialization", version.ref = "xmlUtilSerialization" }
xml-util-serialization-jvm = { module = "io.github.pdvrieze.xmlutil:serialization-jvm", version.ref = "xmlUtilSerialization" }
xml-util-serialization-android = { module = "io.github.pdvrieze.xmlutil:serialization-android", version.ref = "xmlUtilSerialization" }
touchlab-kermit = { module = "co.touchlab:kermit", version.ref = "kermit" }
kotlinx-serialization-core = { module = "org.jetbrains.kotlinx:kotlinx-serialization-core", version.ref = "kotlinxSerialization" }
kotlin-test = { module = "org.jetbrains.kotlin:kotlin-test", version.ref = "kotlin" }
kotlin-test-junit5 = { module = "org.jetbrains.kotlin:kotlin-test-junit5", version.ref = "kotlin" }
# Build logic dependencies
android-gradlePlugin = { module = "com.android.tools.build:gradle", version.ref = "agp" }
kotlin-gradlePlugin = { module = "org.jetbrains.kotlin:kotlin-gradle-plugin", version.ref = "kotlin" }
spotless-gradlePlugin = { module = "com.diffplug.spotless:spotless-plugin-gradle", version.ref = "spotless" }
compose-gradlePlugin = { module = "org.jetbrains.compose:compose-gradle-plugin", version.ref = "compose-multiplatform" }
kotlinx-coroutines-core = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core", version.ref = "coroutines" }
coroutines-test = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-test", version.ref = "coroutines" }
junit-jupiter = { module = "org.junit.jupiter:junit-jupiter" }
junit-bom = { module = "org.junit:junit-bom", version.ref = "junit5"}
lyricist-core = { module = "cafe.adriel.lyricist:lyricist-core", version.ref = "lyricist" }
lyricist-library = { module = "cafe.adriel.lyricist:lyricist", version.ref = "lyricist" }
compose-ui-tooling-preview = { module = "org.jetbrains.compose.ui:ui-tooling-preview", version.ref = "compose-multiplatform"}
compose-ui-tooling = { group = "org.jetbrains.compose.ui", name = "ui-tooling", version.ref = "compose-multiplatform" }
compose-animation-graphics = { group = "org.jetbrains.compose.animation", name = " animation-graphics", version.ref = "compose-multiplatform" }
compose-lint-check = { module = "com.slack.lint.compose:compose-lint-checks", version.ref = "composeLintChecks" }

[bundles]
common-test = [
  "kotlin-test",
  "kotlin-test-junit5"
]

