CREATE TABLE IF NOT EXISTS `events`(
  id INTEGER NOT NULL PRIMARY KEY,
  `day_id` INTEGER,
  `room_id` INTEGER,
  `start_time` TEXT AS kotlinx.datetime.LocalTime,
  `duration` TEXT AS kotlinx.datetime.LocalTime,
  `isBookmarked` INTEGER AS kotlin.Boolean NOT NULL DEFAULT 0,
  `title` TEXT,
  `abstract_text` TEXT,
  `description` TEXT,
  `track` TEXT,
  FOREIGN KEY (day_id) REFERENCES days(id) ON UPDATE NO ACTION ON DELETE CASCADE,
  FOREIGN KEY (room_id) REFERENCES rooms(id) ON UPDATE NO ACTION ON DELETE CASCADE
);

-- indices

CREATE UNIQUE INDEX IF NOT EXISTS `index_events_day_id` ON `events` (`day_id`);
CREATE UNIQUE INDEX IF NOT EXISTS `index_events_room_id` ON `events` (`room_id`);

-- queries

insert:
INSERT OR IGNORE INTO events(
    `id`,
    `day_id`,
    `room_id`,
    `start_time`,
    `duration`,
    `title`,
    `isBookmarked`,
    `abstract_text`,
    `description`,
    `track`
) VALUES(
  nullif(:id, 0),
  :day_id,
  :room_id,
  :start_time,
  :duration,
  :title,
  :isBookmarked,
  :abstract_text,
  :description,
  :track
);

deleteAll:
DELETE FROM events;

selectAll:
SELECT
  events.*,
  days.*,
  rooms.*
FROM events
INNER JOIN days ON events.day_id = days.id
INNER JOIN rooms ON events.room_id = rooms.id
WHERE events.day_id = ?
GROUP BY events.id;
