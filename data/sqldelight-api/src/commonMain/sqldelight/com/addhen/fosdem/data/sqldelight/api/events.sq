import kotlinx.datetime.LocalDate;

CREATE TABLE IF NOT EXISTS `events`(
  id INTEGER NOT NULL PRIMARY KEY,
  `room_id` INTEGER,
  `date` TEXT AS kotlinx.datetime.LocalDate NOT NULL,
  `start_time` TEXT AS kotlinx.datetime.LocalTime NOT NULL,
  `duration` TEXT AS kotlinx.datetime.LocalTime NOT NULL,
  `isBookmarked` INTEGER AS kotlin.Boolean NOT NULL DEFAULT 0,
  `title` TEXT NOT NULL,
  `abstract_text` TEXT NOT NULL,
  `description` TEXT,
  `track` TEXT,
  FOREIGN KEY (room_id) REFERENCES rooms(id) ON UPDATE NO ACTION ON DELETE CASCADE
);

-- indices

--CREATE UNIQUE INDEX IF NOT EXISTS `index_events_day_id` ON `events` (`day_id`);
CREATE UNIQUE INDEX IF NOT EXISTS `index_events_room_id` ON `events` (`room_id`);

-- triggers
CREATE TRIGGER delete_all_tables
AFTER DELETE ON `events`
BEGIN
  DELETE FROM links;
  DELETE FROM rooms;
  DELETE FROM speakers;
  DELETE FROM attachments;
  DELETE FROM event_links;
  DELETE FROM event_speakers;
  DELETE FROM event_attachments;
END;

-- queries

insert:
INSERT INTO events(
    `id`,
    `date`,
    `room_id`,
    `start_time`,
    `duration`,
    `title`,
    `isBookmarked`,
    `abstract_text`,
    `description`,
    `track`
) VALUES(
  nullif(:id, 0),
  :date,
  :room_id,
  :start_time,
  :duration,
  :title,
  :isBookmarked,
  :abstract_text,
  :description,
  :track
);

deleteAll:
DELETE FROM events;

selectAll:
SELECT
  events.*,
  days.*,
  rooms.*
FROM events
INNER JOIN days ON events.date = days.date
INNER JOIN rooms ON events.room_id = rooms.id
WHERE events.date = ?;

selectById:
SELECT
  events.*,
  days.*,
  rooms.*
FROM events
INNER JOIN days ON events.date = days.date
INNER JOIN rooms ON events.room_id = rooms.id
WHERE events.id = ?;

toggleBookmark:
UPDATE events
SET isBookmarked = CASE
    WHEN isBookmarked = 0 THEN 1
    ELSE 0
END
WHERE id = ?;
